#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAXSYM 50

struct Symbol {
    char label[10];
    int address;
};

int main() {
    char label[10], opcode[10], operand[10];
    int locctr, start, length;
    struct Symbol symtab[MAXSYM];
    int symcount = 0;

    printf("Enter the starting address (hex): ");
    scanf("%x", &start);
    locctr = start;

    printf("Enter the code (LABEL OPCODE OPERAND), use '-' if no label.\n");
    printf("Type END to finish.\n\n");

    while(1) {
        scanf("%s %s %s", label, opcode, operand);

        if(strcmp(opcode, "END") == 0) break;

        printf("%04X\t%-6s %-6s %-6s", locctr, label, opcode, operand);

        // store label if present
        if(strcmp(label, "-") != 0) {
            strcpy(symtab[symcount].label, label);
            symtab[symcount].address = locctr;
            symcount++;
            printf("\t-> Symbol %s defined at %04X", label, locctr);
        }
        printf("\n");

        // handle opcodes/directives
        if(strcmp(opcode, "WORD") == 0) {
            locctr += 3;
        } else if(strcmp(opcode, "RESW") == 0) {
            locctr += 3 * atoi(operand);
        } else if(strcmp(opcode, "RESB") == 0) {
            locctr += atoi(operand);
        } else if(strcmp(opcode, "BYTE") == 0) {
            if(operand[0] == 'C') {        // e.g. C'EOF'
                locctr += strlen(operand) - 3;
            } else if(operand[0] == 'X') { // e.g. X'F1'
                locctr += (strlen(operand) - 3) / 2;
            }
        } else {
            // default: assume instruction is 3 bytes
            locctr += 3;
        }
    }

    length = locctr - start;

    // print symbol table
    printf("\nSymbol Table:\n");
    for(int i = 0; i < symcount; i++) {
        printf("%s\t%04X\n", symtab[i].label, symtab[i].address);
    }
